#!/usr/bin/env python3
""" covid19-vi  -  Visualization utilities for the COVID-19 data from Johns Hopkins.

    Copyright (C) 2020  Natalya Langford

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = 'Natalya Langford'
__copyright__ = 'Copyright (C) 2020 Natalya Langford'
__credits__ = ['']
__license__ = 'GNU General Public License'
__program_name__ = 'covid19-vi'
__version__ = 'v0.0.1'
__maintainer__ = 'Natalya Langford'
__status__ = 'Under Development'
__docformat__ = 'reStructuredText'
# pylint: disable=multiple-statements
# pylint: disable=line-too-long

import argparse
import sys
import os
from datetime import datetime
import shutil
import csv
import urllib.request
import pandas as pd


class CovidData:
    _covid_data = {'confirmed': 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',
                   'deaths': 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv',
                   'recoveries': 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv'}

    def __init__(self, key='confirmed'):
        self.data_key = key
        self.file_name = None
        self.df = None

    def print_sources(self):
        [print('{}: {}'.format(k, v)) for k, v in self._covid_data.items()]

    def print(self):
        print(self.data_key)

    def download_datafile(self):
        """ Return the new downloaded data's filename as a string
            Source: https://github.com/Ricks-Lab/amdgpu-utils/blob/c10dba61f11b9e5fb44d24acd1fa74122668afc2/GPUmodules/PCImodule.py
        """
        self.file_name = 'covid_{}_{}.csv'.format(self.data_key, datetime.utcnow().strftime('%m%d_%H%M%S'))
        with urllib.request.urlopen(self._covid_data[self.data_key]) as response, open(self.file_name, 'wb') as out_file:
            shutil.copyfileobj(response, out_file)

        if os.path.isfile(self.file_name):
            return self.file_name
        else:
            return None

    def read_csv_file(self):
        self.df = pd.read_csv(self.file_name)
        print(self.df.values[:, 5:])
        # self.df['total'] = self.df.values[:, 5:].sum(axis=1) Not cumulative
        self.df['total'] = self.df.values[:, -1]
        return self.df

    def top_ten(self):
        ttdf = self.df.sort_values(['total'], ascending=False).head(30)
        print(ttdf)

    def top_ten_us_states(self):
        ldf = self.df.loc[self.df['Country/Region'] == 'US']
        ttdf = ldf.sort_values(['total'], ascending=False).head(30)
        print(ttdf)


def main():
    """
    Main flow for covid19-vi.
    :return:
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--about', help='README',
                        action='store_true', default=False)
    parser.add_argument('--parameter', help='confirmed, deaths, recoveries',
                        action='store_true', default=False)
    parser.add_argument('--download', help='download csv file',
                        action='store_true', default=False)
    parser.add_argument('--filename', help='csv file name',
                        type=str, default='')
    parser.add_argument('--table', help='Output table of basic GPU details',
                        action='store_true', default=False)
    parser.add_argument('-d', '--debug', help='Debug output',
                        action='store_true', default=False)
    args = parser.parse_args()

    # About me
    if args.about:
        print(__doc__)
        print('Author: ', __author__)
        print('Copyright: ', __copyright__)
        print('Credits: ', __credits__)
        print('License: ', __license__)
        print('Version: ', __version__)
        print('Maintainer: ', __maintainer__)
        print('Status: ', __status__)
        sys.exit(0)

    covid_confirmed = CovidData(key='deaths')
    if args.download:
        covid_confirmed.download_datafile()

    if args.filename:
        covid_confirmed.file_name = args.filename

    covid_confirmed.read_csv_file()
    print(covid_confirmed.df.columns)
    covid_confirmed.top_ten()

    covid_confirmed.top_ten_us_states()


    sys.exit(0)


if __name__ == '__main__':
    main()
